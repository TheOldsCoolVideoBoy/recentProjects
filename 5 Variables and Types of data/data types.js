//Есть восемь основных типов данных в JavaScript.

//Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число:

// Не будет ошибкой
let message = "hello";
message = 123456;

//Языки программирования, в которых такое возможно, называются «динамически типизированными». Это значит, что типы данных есть, но переменные не привязаны ни к одному из них.

//number

//Числовой тип данных (number) представляет как целочисленные значения, так и числа с плавающей точкой.
let n = 123;
n = 12.345;


//NaN & Infinity

//Кроме обычных чисел, существуют так называемые «специальные числовые значения», которые относятся к этому типу данных: Infinity, -Infinity и NaN.

//Infinity представляет собой математическую бесконечность ∞. Это особое значение, которое больше любого числа.
//Мы можем получить его в результате деления на ноль:
console.log('1/0 =', 1/0);
//Или задать его явно:
console.log( Infinity ); // Infinity


//NaN означает вычислительную ошибку. Это результат неправильной или неопределённой математической операции, например:
console.log( "не число" / 2 ); // NaN, такое деление является ошибкой
//Значение NaN «прилипчиво». Любая математическая операция с NaN возвращает NaN:
console.log( NaN + 1 ); // NaN
console.log( 3 * NaN ); // NaN
console.log( "не число" / 2 - 1 ); // NaN
//Если где-то в математическом выражении есть NaN, то оно распространяется на весь результат (есть только одно исключение: NaN ** 0 равно 1).


/*
Математические операции – безопасны
Математические операции в JavaScript «безопасны». Мы можем делать что угодно: делить на ноль, обращаться с нечисловыми строками как с числами и т.д.
Скрипт никогда не остановится с фатальной ошибкой (не «умрёт»). В худшем случае мы получим NaN как результат выполнения.
*/


//BigInt

/*
Для большинства случаев достаточно безопасного диапазона чисел от -(2^53-1) до (2^53-1). Но иногда нам нужен диапазон действительно гигантских целых чисел без каких-либо ограничений или пропущенных значений внутри него. Например, в криптографии или при использовании метки времени («timestamp») с микросекундами.

Тип BigInt был добавлен в JavaScript, чтобы дать возможность работать с целыми числами произвольной длины.

Чтобы создать значение типа BigInt, необходимо добавить n в конец числового литерала:
*/

// символ "n" в конце означает, что это BigInt
const bigInt = 1234567890123456789012345678901234567890n;

//String

//Строка (string) в JavaScript должна быть заключена в кавычки.
let str = "Привет";
let str2 = 'Одинарные кавычки тоже подойдут';
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;

/*
В JavaScript существует три типа кавычек.

    Двойные кавычки: "Привет".
    Одинарные кавычки: 'Привет'.
    Обратные кавычки: `Привет`.
*/

//Двойные или одинарные кавычки являются «простыми», между ними нет разницы в JavaScript!

//Обратные же кавычки имеют расширенную функциональность. Они позволяют нам встраивать выражения в строку, заключая их в ${…}. Например:
let name = "Иван";
// Вставим переменную
console.log( `Привет, ${name}!` ); // Привет, Иван!
// Вставим выражение
console.log( `результат: ${1 + 2}` ); // результат: 3

/* Выражение внутри ${…} вычисляется, и его результат становится частью строки. Мы можем положить туда всё, что угодно: переменную name, или выражение 1 + 2, или что-то более сложное.
Обратите внимание, что это можно делать только в обратных кавычках. Другие кавычки не имеют такой функциональности встраивания!
 */
console.log( "результат: ${1 + 2}" ); // результат: ${1 + 2} (двойные кавычки ничего не делают)

//тип char не существует в JS

//boolean

let nameFieldChecked = true; // да, поле отмечено
let ageFieldChecked = false; // нет, поле не отмечено

//Булевые значения также могут быть результатом сравнений:
let isGreater = 4 > 1;
console.log( isGreater ); // true (результатом сравнения будет "да")

//null

/* Специальное значение null не относится ни к одному из типов, описанных выше.
Оно формирует отдельный тип, который содержит только значение null: */

let Age = null;

/* В JavaScript null не является «ссылкой на несуществующий объект» или «нулевым указателем», как в некоторых других языках.
Это просто специальное значение, которое представляет собой «ничего», «пусто» или «значение неизвестно».
В приведённом выше коде указано, что значение переменной age неизвестно. */


//undefined

//undefined означает что переменная не инициализированна.
let x;
console.log(x);

//Технически мы можем присвоить значение undefined любой переменной:
let age = 123;
// изменяем значение на undefined
age = undefined;
console.log(age); // "undefined"

//undefined часто применяется для того чтобы узнать, инициализированна ли переменная

//object & symbol

/* 
Тип object (объект) – особенный.
Все остальные типы называются «примитивными», потому что их значениями могут быть только простые значения (будь то строка, или число, или что-то ещё). В объектах же хранят коллекции данных или более сложные структуры.
Объекты занимают важное место в языке и требуют особого внимания. Мы разберёмся с ними в главе Объекты после того, как узнаем больше о примитивах.

Тип symbol (символ) используется для создания уникальных идентификаторов в объектах. Мы упоминаем здесь о нём для полноты картины, изучим этот тип после объектов. */

//typeof

//тайп оф это тайп оф то бишь возвращения типа переменной?
//тебе пришло в функцию что-то и тебе нужна валидация? проверь тайп офом.
/*
 У него есть две синтаксические формы:

    Синтаксис оператора: typeof x.
    Синтаксис функции: typeof(x).

Другими словами, он работает со скобками или без скобок. Результат одинаковый.
 */

/* Итого

В JavaScript есть 8 основных типов данных.

    Семь из них называют «примитивными» типами данных:
        number для любых чисел: целочисленных или чисел с плавающей точкой; целочисленные значения ограничены диапазоном ±(253-1).
        bigint для целых чисел произвольной длины.
        string для строк. Строка может содержать ноль или больше символов, нет отдельного символьного типа.
        boolean для true/false.
        null для неизвестных значений – отдельный тип, имеющий одно значение null.
        undefined для неприсвоенных значений – отдельный тип, имеющий одно значение undefined.
        symbol для уникальных идентификаторов.
    И один не является «примитивным» и стоит особняком:
        object для более сложных структур данных.

Оператор typeof позволяет нам увидеть, какой тип данных сохранён в переменной.

    Имеет две формы: typeof x или typeof(x).
    Возвращает строку с именем типа. Например, "string".
    Для null возвращается "object" – это ошибка в языке, на самом деле это не объект.
 */